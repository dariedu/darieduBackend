#version: '3.10'

services:
  dariedu-server:
    depends_on:
      db:
        condition: service_healthy
        restart: true
    build: ./dariedu
    command: bash -c "
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn dariedu.wsgi:application --bind 0.0.0.0:8000 --reload"
    env_file:
      - .env
    volumes:
      - static_volume:/home/app/web/staticfiles
      - ./dariedu:/app
      - ./credentials.json:/app/credentials.json
      - ./static:/static
      - ./media:/media
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${BACKEND_DB_PORT}/${DB_NAME}
    networks:
      - mynetwork

  celery-worker:
    build: ./dariedu
    user: celeryuser
    command: celery -A dariedu worker -l info
    env_file:
      - .env
    depends_on:
      - db
      - redis
    volumes:
      - ./dariedu:/app
      - ./credentials.json:/app/credentials.json
    networks:
      - mynetwork

  celery-beat:
    build: ./dariedu
    user: celeryuser
    command: celery -A dariedu beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env
    depends_on:
      - db
      - redis
    volumes:
      - ./dariedu:/app
      - ./credentials.json:/app/credentials.json
    networks:
      - mynetwork

  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "${BACKEND_DB_PORT}:${DB_PORT}"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - mynetwork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s

  redis:
    image: redis:alpine
#    ports:
#      - "6379:6379"
    networks:
      - mynetwork

volumes:
  pg_data:
    driver: local
  static_volume:

networks:
  mynetwork:
    external: true